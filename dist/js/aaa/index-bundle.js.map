{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","c"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,GAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,QAAAU,OAAAJ,qBCAAI,QAAOJ,SACLP,EAAG,MACHY,EAAG","file":"index-bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = {\n  a: 'bbb',\n  c: 12345\n};\n\n// var _ = require('underscore');\n// var Promise = require('bluebird');\n// var archieml = Promise.promisifyAll(require('archieml'));\n// var fs = Promise.promisifyAll(require('fs'));\n// var markdownFilter = require('nunjucks-markdown-filter');\n//\n//\n// var HOT_COPY_DIR = './build/static/assets/hot-copy/';\n//\n//\n// function parseArchieFile(hotCopyDir, fileName) {\n//     return new Promise(function (resolve, reject) {\n//         var fileRead =  fs.readFileAsync(hotCopyDir + fileName + '.aml', 'utf-8');\n//\n//         fileRead.then(\n//           function(data) {\n//               resolve({ fileName: fileName, data: archieml.load(data) });\n//           },\n//           function(error) { reject(error); }\n//         );\n//     });\n// }\n//\n// module.exports = {\n//     configure: function(config) {\n//         this.hotCopyDir = HOT_COPY_DIR;\n//         if (_.has(config, 'hotCopyDir')) {\n//             this.hotCopyDir = config.hotCopyDir;\n//         }\n//         console.log(this.hotCopyDir);\n//     },\n//     watchHotCopyFiles: function(gulp, tasks) {\n//         var reload = require('browser-sync').create().reload;\n//\n//         return gulp.watch(\n//             this.hotCopyDir + '*.aml',\n//             tasks\n//         ).on(\"change\", reload);\n//     },\n//     extendNunjucks: function(nunjucksEnv) {\n//         markdownFilter.install(nunjucksEnv, 'markdown');\n//         nunjucksEnv.addGlobal(\n//             'hotCopyHelper',\n//             function () {\n//                 return {\n//                     'connect': function(copySlug) {\n//                         if (\n//                             typeof this.ctx.hotCopyItems !== 'undefined' &&\n//                             _.contains(_.keys(this.ctx.hotCopyItems), copySlug)\n//                         ) {\n//                             return this.ctx.hotCopyItems[copySlug];\n//                         }\n//\n//                         return false;\n//                     }.bind(this)\n//                 };\n//             }\n//         );\n//     },\n//     insertHotCopy: function(meta) {\n//         var metaObj = meta;\n//         var thisObj = this;\n//\n//         if (typeof meta.hotCopyDocument !== 'undefined') {\n//             if (meta.hotCopyDocument !== '') {\n//                 var hotCopyItems = {};\n//\n//                 var archiePromises = _.map(\n//                     fs.readdirSync(thisObj.hotCopyDir),\n//                     function(dirFile) {\n//                         if (dirFile.substring(dirFile.indexOf('.')) === '.aml') {\n//                             return parseArchieFile(\n//                                 thisObj.hotCopyDir,\n//                                 dirFile.substring(0, dirFile.indexOf('.'))\n//                             );\n//                         }\n//\n//                         return null;\n//                     }\n//                 );\n//\n//                 Promise.all(_.compact(archiePromises)).then(\n//                     function(results) {\n//                         _.each(results, function(result) {\n//                             // Namespace hot-copy data under the 'hotCopy' property\n//                             // on the meta object.\n//                             hotCopyItems[result.fileName] = result.data;\n//\n//                             // Write the data to a JSON file.\n//                             fs.writeFile(\n//                                 thisObj.hotCopyDir + result.fileName + '.json',\n//                                 JSON.stringify(result.data, null, 4),\n//                                 function(err) { if (err) { return console.log(err); } }\n//                             );\n//                         });\n//\n//                         metaObj = _.extend(meta, { hotCopyItems: hotCopyItems });\n//                     },\n//                     function(error) {\n//                         console.log('ArchieML conversion error:');\n//                         console.log(error);\n//                     }\n//                 );\n//             }\n//         }\n//\n//         return metaObj;\n//     }\n// };\n"]}